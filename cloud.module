<?php


/**
 * @file
 * Enables users to access the Privately managed clouds.
 * Provides common functionalites for cloud management.
 *
 */

module_load_include('inc', 'cloud', 'cloud.constants');
module_load_include('inc', 'cloud', 'cloud.db');
module_load_include('inc', 'cloud');

/**
 * Implements hook_init().
 */
// @FIXME
// function cloud_init() {
//    drupal_add_html_head_link(
//     array(
//        'type' => 'text/css', 
//        'rel' => 'stylesheet', 
//        'media' => 'all', 
//        'href' => base_path() . drupal_get_path('module', 'cloud') . CLOUD_PATH_SEPARATOR . 'css/cloud.css',
//      )
//    );
// }


/**
 * Implements hook_help().
 */
function cloud_help($section) {
  switch ($section) {
    case 'admin/help#':
      $output = '<p>' . t('The cloud module creates a user interface for users to manage clouds. Users can Create Instances,  Describe Instances etc.') . '</p>';
      return $output;
  }
}



/**
 * Implements hook_permission().
 */
function cloud_permission() {
  return array(
    'access dashboard' => array(
      'title' => t('access dashboard'),
      'description' => t('TODO Add a description for \'access dashboard\''),
    ),
    'administer cloud' => array(
      'title' => t('administer cloud'),
      'description' => t('TODO Add a description for \'administer cloud\''),
    ),
  );
}


/**
 * Implements hook_theme().
 */
function cloud_theme() {
  return array(
    'cloud_display_dashboard' => array(
      'render element' => 'form',
    ),
  );
}


/**
 * Modules notify Cloud module when uninstalled, disabled, etc.
 *
 * @param string $op
 *   the module operation: uninstall, install, enable, disable
 * @param string $module
 *   the name of the affected module.
 */
function cloud_notify($op, $module) {

  switch ($op) {
    case 'install'  :
    case 'uninstall':
    case 'enable'   :
    case 'disable'  :
      // for cloud sub system
      _cloud_set_info($op, $module);
      // for resource allocator
      break;
  }
}

/**
 *  Notify other modules about a cloud action performed
 */
function cloud_action_notify($op, $params) {

  \Drupal::moduleHandler()->invokeAll('cloud_action_notify', [$op, $params]);

}


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function cloud_update_all_cloud_data() {

  drupal_set_time_limit(CLOUD_TIME_LIMIT);

  $cloud_list         = cloud_get_all_clouds();
  $cloud_display_list = cloud_get_all_clouds_display_name();
  foreach ($cloud_list as $cloud_context) {

    $is_cloud_enabled = cloud_is_settings_done($cloud_context);
    if ($is_cloud_enabled === FALSE ) {
      // Skip this Cloud since it is not configured

      cloud_set_config_error_message($cloud_display_list[$cloud_context], $cloud_context);
      continue;
    }

    $module = cloud_get_module($cloud_context);
    \Drupal::moduleHandler()->invoke($module, 'cloud_update_data', [$cloud_context]);
  }
}

/**
 * Cloud Module Action
 *        This function is used to perform action on the sub-cloud
 * @param string $templateid
 *   Server template id : The template on whcih the action is to be performed
 * @param string $op
 *   the operation: launch, terminate to be executed
 * @param string $cloud_context
 *   The sub-cloud on which the operation is to be executed
 * @param string $params
 *   The parameters to be passed
 *
 */
function cloud_perform_action($templateid = '', $op, $cloud_context = '', $params = array(), $all = '' ) {

  $params['templateid'   ] = $templateid;
  $params['all'          ] = $all;
  $params['cloud_context'] = $cloud_context;

  $cloud_list           = cloud_get_all_clouds();
  $cloud_display_list   = cloud_get_all_clouds_display_name();

  $module = cloud_get_module($cloud_context);

  // Check if Cloud is enabled
  $is_cloud_enabled     = cloud_is_settings_done($cloud_context);
  if ($is_cloud_enabled === FALSE ) {
    cloud_set_config_error_message($cloud_display_list[$cloud_context], $cloud_context);
    return;
  }

  return \Drupal::moduleHandler()->invoke($module, 'cloud_action', [$op, $params]);
}

