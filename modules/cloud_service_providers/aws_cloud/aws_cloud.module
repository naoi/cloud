<?php

/**
 * @file
 * AWS Cloud module. This module handles UI interactions
 * with the cloud system for Amazon related clouds.  Amazon
 * clouds are EC2, OpenStack Nova, and Eucalyptus.
 *
 */

// @todo: find  better way to load these include files
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.sdk'               );
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.constants'         );
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.db'                );
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud'                   );
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.ebs_volumes.db'    );
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.elastic_ips.db'    );
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.images.db'         );
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.instances.db'      );
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.instances_lock_db' );
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.register_image.db' );
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.security_groups.db');
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.snapshots.db'      );
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.snapshots.db'      );
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.ssh_keys.db'       );
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.user_keys.db'      );
//\Drupal::moduleHandler()->loadInclude('aws_cloud', 'inc', 'includes/aws_cloud.data'              );

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\aws_cloud\Controller\Ec2\ApiController;
use Drupal\aws_cloud\Entity\Config\Config;

/**
 * Implements hook_libraries_info()
 */
function aws_cloud_libraries_info() {
  return array(
    'awssdk' => array(
      'title' => 'AWS SDK for PHP',
      'vendor url' => 'http://aws.amazon.com/sdkforphp/',
      'download url' => 'http://aws.amazon.com/sdkforphp/',
      'version arguments' => array(
        'file' => 'sdk.class.php',
        'pattern' => "/define\('CFRUNTIME_VERSION', '(.*)'\);/",
        'lines' => 200,
      ),
      'files' => array(
        'php' => array(
          'sdk.class.php',
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_help()
 */
function aws_cloud_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.aws_cloud':
      $output = '<p>' . t('The aws_cloud module creates a user interface for managing AWS related clouds. AWS clouds are defined as EC2, OpenStack Nova, Cloudn and Eucalyptus.') . '</p>';

      return $output;
  }
}

/**
 * Set dynamic allowed values for the alignment field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function aws_cloud_instance_type_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $instance_types = [];
  if ($entity->bundle() == 'aws_cloud') {
    $types = \Drupal::config('aws_cloud.settings')->get('aws_cloud_instance_types');
    $instance_array =  explode("\r\n", $types);
    foreach ($instance_array as $type) {
      $instance_types[$type] = $type;
    }
  }
  return $instance_types;
}

/**
 * Set dynamic allowed values for the alignment field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function aws_cloud_availbility_zone_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $apiController = new ApiController(\Drupal::service('entity.query'));
  $availability_zones = [];

  if ($entity->bundle() == 'aws_cloud') {
    if ($entity->isNew()) {
      $route = \Drupal::routeMatch();
      $cloud_context = $route->getParameter('cloud_context');
    }
    else {
      $cloud_context = $entity->cloud_context();
    }
    // load the cloud config object
    $cloud_config = Config::load($cloud_context);

    if (isset($cloud_config)) {
      $availability_zones = $apiController->getAvailabilityZones($cloud_config);
    }
  }

  return $availability_zones;
}

/**
 * Implementation of hook_cron().
 */
function aws_cloud_cron() {
//  $clouds = aws_cloud_get_all_clouds();
//  foreach ($clouds as $cloud) {
//    aws_cloud_fetch_data($cloud['cloud_name']); // This will fetch Cloud related information
//    // load the bundle code and run it
//     module_load_include('inc', 'aws_cloud', 'includes/aws_cloud.bundle_instance');
//     aws_cloud_process_bundle_instance();
//  }
}

///**
// * Implementation of hook_user_validate().
// */
//function aws_cloud_user_validate($op, &$edit, &$account, $category = NULL) {
//  switch ($op) {
//    case 'login':
//      $clouds = aws_cloud_get_all_clouds();
//      foreach ($clouds as $cloud) {
//        aws_cloud_ssh_keys_check_load($cloud['cloud_name'], $account->name);
//      }
//    break;
//  }
//}


/**
 * Implementation of hook_cloud_action()
 */
//function aws_cloud_cloud_action($op, $params = array() ) {
//  $cloud_context = $params['cloud_context'];
//  switch ($op) {
//    case 'launch':
//      return aws_cloud_server_templates_launch($cloud_context, $params);
//    case 'launch_using_params':
//      return aws_cloud_launch_params($cloud_context, $params );
//    case 'terminate':
//      return aws_cloud_terminate_instance($cloud_context, $params);
//    case 'check_key_sg_data':
//      return aws_cloud_has_instances_data($cloud_context);
//    case 'check_key_data':
//      return aws_cloud_has_ssh_key_data($cloud_context);
//    case 'check_sg_data':
//      return aws_cloud_has_security_group_data($cloud_context);
//    case 'get_ssh_key_owner':
//      return aws_cloud_get_ssh_key_owner($cloud_context, $params['key_name']);
//    case 'get_images_count':
//      return _aws_cloud_get_images_list_count($cloud_context);
//    case 'backup':
//      return aws_cloud_save_snapshot($cloud_context, $params['volume_id'], $params['snapshot_name'], $params['snapshot_description']);
//    case 'detach_volume':
//      return aws_cloud_detach_volume($cloud_context, $params['volume_id']);
//    case 'check_snapshot_completion':
//      return _aws_cloud_check_snapshot_completion($params['snapshot_id']);
//    case 'check_volume_attached_status':
//      return _aws_cloud_check_volume_attached_status($params['volume_id']);
//    case 'check_instance_terminated':
//      return _aws_cloud_check_instance_terminated($params['instance_id']);
//    case 'get_instance_lock_status':
//      return _aws_cloud_get_lock_status_by_id_query($params['cloud_context'], $params['instance_id']);
//  }
//}


/**
 * Implementation of hook_cloud_get_all_instances()
 */
//function aws_cloud_cloud_get_all_instances($cloud_context, $filter = array()) {
//  module_load_include('inc', 'aws_cloud', 'includes/aws_cloud.instances.ui');
//  $instances_list = _aws_cloud_get_all_instances_db($cloud_context, $filter);
//  foreach ($instances_list as &$instance) {
//    $action_data = aws_cloud_get_instances_action($cloud_context, $instance);
//    $instance['action_data'] = $action_data;
//  }
//  return $instances_list;
//}


/**
 * Implementation of hook_cloud_update_data().
 */
//function aws_cloud_cloud_update_data($cloud_context) {
//  return aws_cloud_fetch_data($cloud_context);
//}

/**
 * Implementation of hook_cloud_get_instance().
 */
//function aws_cloud_cloud_get_instance($cloud_context, $filter = array()) {
//  return _aws_cloud_get_all_instances_db($cloud_context, $filter);
//}

/**
 * Get all the available sub cloud and their default
 * pricing and template data.
 * This function then calls hook_aws_cloud_data to allow
 * modules to add other amazon based sub-clouds into
 * the list.
 * @param $base_cloud
 *  Sub-cloud's key. If not passed, all sub cloud data
 *  is returned
 */
function aws_cloud_get_cloud_data($base_cloud = NULL) {

  static $data;

  $data = \Drupal::moduleHandler()->invokeAll('aws_cloud_data');
  if(empty($data)) $data = aws_cloud_aws_cloud_data();
  if (isset($base_cloud)) {
    return isset($data[$base_cloud]) ? $data[$base_cloud] : array();
  }

  return $data;
}

/**
 * Implementation of hook_cloud_set_info().
 * I feel this hook doesn't have much use anymore
 * in the new cloud management
 */
function aws_cloud_cloud_set_info($cloud_context = '') {

  //from cloud_context, get base_cloud, and return the base info
  $info = array();
  if (!empty($cloud_context)) {
    $cloud = aws_cloud_get_cloud($cloud_context);
    $info  = aws_cloud_get_cloud_data($cloud['base_cloud']);
  }

  return $info;
}

/**
 * Implementation of hook_cloud_save().
 * Gives this module a chance to save data into
 * its own database tables and perform other actions
 */
//function aws_cloud_cloud_save($op, $cloud) {
//  switch ($op) {
//    case 'create':
//      \Drupal::database()->insert(AWS_CLOUD_DETAILS_TABLE)->fields($cloud)->execute();
//      // @FIXME
//// // @FIXME
//// // The correct configuration object could not be determined. You'll need to
//// // rewrite this call manually.
//// variable_set($cloud->cloud_name . '_menu_path', 'clouds/' . $cloud->cloud_name);
//
//      // @FIXME
//// // @FIXME
//// // The correct configuration object could not be determined. You'll need to
//// // rewrite this call manually.
//// variable_set($cloud->cloud_name . '_admin_menu_path', 'admin/config/clouds/' . $cloud->cloud_name . '/edit');
//
//      menu_rebuild();
//      break;
//    case 'edit':
//      \Drupal::database()->merge(AWS_CLOUD_DETAILS_TABLE)->fields($cloud)->key(['cloud_name'])->execute();
//      menu_rebuild();
//      break;
//  }
//}

/**
 * Implementation of hook_cloud_delete().
 * Delete row from the cloud_aws_cloud_details table
 */
//function aws_cloud_cloud_delete($cloud_name) {
//  aws_cloud_delete_cloud($cloud_name);
//  menu_rebuild();
//  // @FIXME
//// // @FIXME
//// // The correct configuration object could not be determined. You'll need to
//// // rewrite this call manually.
//// variable_del($cloud_name . '_menu_path');
//
//  // @FIXME
//// // @FIXME
//// // The correct configuration object could not be determined. You'll need to
//// // rewrite this call manually.
//// variable_del($cloud_name . '_admin_menu_path');
//
//  aws_cloud_delete_all($cloud_name);
//}

/**
 * Implementation of hook_cloud_get_info().
 * Allows this module to return the information requested.
 * Use a static cache because this function gets called a lot
 * during a cloud refresh or on a cron run
 */
//function aws_cloud_cloud_get_info($cloud_name, $key) {
//  $values = &drupal_static(__FUNCTION__);
//  $return = NULL;
//  $cache_key = "$cloud_name:$key";
//  if (isset($values[$cache_key])) {
//    $return = $values[$cache_key];
//  }
//  else {
//    $value = aws_cloud_get_info($cloud_name, $key);
//    if ($value !== FALSE) {
//      $values[$cache_key] = $value;
//      $return = $value;
//    }
//  }
//  return $return;
//}

/**
 * Function to determine access to ssh key materials.
 * This permission check makes sure a user that can only
 * access their own console receives the same access to the
 * ssh key.
 *
 * Users without permissions will not be able to access the
 * private key
 */
//function aws_cloud_lib_key_access($cloud_context, $key_name) {
//  $user = \Drupal::currentUser();
//  if ($user->uid == 1) {
//    return TRUE;
//  }
//  if (\Drupal::currentUser()->hasPermission($cloud_context . ' access own console')) {
//    $user_keys_all = aws_cloud_get_all_keys($cloud_context);
//    if (in_array($key_name, $user_keys_all)) {
//      return TRUE;
//    }
//    return FALSE;
//  }
//  return \Drupal::currentUser()->hasPermission($cloud_context . ' access all console');
//}

/**
 * Launch an instance with parameters 
 */
//function aws_cloud_launch_params($cloud_context, $launch_params = array() ) {
//  if (empty($launch_params) || isset($launch_params['template_id']) === FALSE) {
//    drupal_set_message(t('Cannot launch instance without a template_id'), 'error');
//    return;
//  }
//  $redirect = '' ;
//  if (isset($launch_params['redirect']) ) {
//    $redirect = $launch_params['redirect'];
//  }
//  $template_id = $launch_params['template_id'];
//
//  $key           = '';
//  $result        = '';
//  $result_launch = '';
//  $new_instance_ids = array();
//
//  $query         = _cloud_server_templates_get_server_template_details();
//  $query->condition('template_id', $template_id, '=');
//  $result = $query->execute();
//  $count  = 0;
//
//  foreach ($result as $key) {
//    $user_name = empty($key->user_name) ? CLOUD_SSH_USER_NAME : $key->user_name;
//    $params = array();
//
//    // Set the overriding paramters
//    $nickname         = isset( $launch_params['nickname'] ) ? $launch_params['nickname'] : $key->template_nickname;
//    $key_name         = isset( $launch_params['key_name'] ) ? $launch_params['key_name'] : $key->key_name          ;
//    $placement        = isset( $launch_params['placement'] ) ? $launch_params['placement'] : $key->placement         ;
//    $count_instances  = isset( $launch_params['count_instances'] ) ? $launch_params['count_instances'] : $key->count_instances         ;
//    $grp_str          = isset( $launch_params['security_group'] ) ? $launch_params['security_group'] : $key->group_id;
//    $grp_id           = explode(',', $grp_str );
//
//    $result_launch = aws_cloud_launch_new_instance(
//      $key->cloud_type      ,
//      $nickname             ,
//      $key->image_id        ,
//      $count_instances      ,
//      $key_name             ,
//      $grp_id               ,
//      $key->user_data       ,
//      $key->instance_type   ,
//      $placement            ,
//      $key->kernel_id       ,
//      $key->ramdisk_id      ,
//      $params               ,
//      $user_name
//    );
//
//    $count = $count + 1;
//  }
//
//  if ($result_launch) {
//    // Allow other modules to handle instance data
//    foreach ($result_launch as $new_instance_id) {
//      $new_instance_ids[] = (string) $new_instance_id;
//      cloud_action_notify('post_launch', array('cloud_context' => $cloud_context, 'instance_id' => $new_instance_id, 'template_id' => $template_id));
//    }
//    _aws_cloud_set_scripts_to_exec($new_instance_ids, $template_id, $cloud_context);
//  }
//  else {
//    if (empty($redirect)) {
//      if ( $count == 0) {
//        drupal_set_message(\Drupal\Component\Utility\SafeMarkup::checkPlain(t('Failed to launch instance. Template not found: @template_id', array('@template_id' => $template_id) ) ), 'error' );
//      }
//      else {
//        drupal_set_message(t('Failed to launch instance.'), 'error');
//      }
//    }
//  }
//  //Return array of newly launched instances.
//  if (empty($redirect)) {
//    return $result_launch;
//  }
//  else {
//    return $new_instance_ids;
//  }
//}


