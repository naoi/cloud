<?php

/**
 * @file
 * AWS Cloud module. This module handles UI interactions
 * with the cloud system for Amazon related clouds.  Amazon
 * clouds are EC2, OpenStack Nova, and Eucalyptus.
 *
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_libraries_info()
 */
function aws_cloud_libraries_info() {
  return array(
    'awssdk' => array(
      'title' => 'AWS SDK for PHP',
      'vendor url' => 'http://aws.amazon.com/sdkforphp/',
      'download url' => 'http://aws.amazon.com/sdkforphp/',
      'version arguments' => array(
        'file' => 'sdk.class.php',
        'pattern' => "/define\('CFRUNTIME_VERSION', '(.*)'\);/",
        'lines' => 200,
      ),
      'files' => array(
        'php' => array(
          'sdk.class.php',
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_help()
 */
function aws_cloud_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.aws_cloud':
      $output = '<p>' . t('The aws_cloud module creates a user interface for managing AWS related clouds. AWS clouds are defined as EC2, OpenStack Nova, Cloudn and Eucalyptus.') . '</p>';

      return $output;
  }
}

/**
 * Set dynamic allowed values for the alignment field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function aws_cloud_instance_type_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $instance_types = [];
  if ($entity->bundle() == 'aws_cloud') {
    $types = \Drupal::config('aws_cloud.settings')->get('aws_cloud_instance_types');
    $instance_array =  explode("\r\n", $types);
    foreach ($instance_array as $type) {
      $instance_types[$type] = $type;
    }
  }
  return $instance_types;
}

/**
 * Set dynamic allowed values for the alignment field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function aws_cloud_availbility_zone_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {

  /* @var \Drupal\aws_cloud\Service\AwsEc2ServiceInterface $awsEc2Service */
  $awsEc2Service = \Drupal::service('aws_cloud.ec2');
  $availability_zones = [];

  if ($entity->bundle() == 'aws_cloud') {
    if ($entity->isNew()) {
      $route = \Drupal::routeMatch();
      $cloud_context = $route->getParameter('cloud_context');
    }
    else {
      $cloud_context = $entity->cloud_context();
    }
    $awsEc2Service->setCloudContext($cloud_context);
    $availability_zones = $awsEc2Service->getAvailabilityZones();
  }

  return $availability_zones;
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function aws_cloud_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  // Add aws constraint to cloud_server_template.
  // This constraint will perform AWS specific validations
  $entity_types['cloud_server_template']->addConstraint('AWSConstraint');
}

/**
 * Implementation of hook_cron().
 */
function aws_cloud_cron() {
//  $clouds = aws_cloud_get_all_clouds();
//  foreach ($clouds as $cloud) {
//    aws_cloud_fetch_data
//($cloud['cloud_name']); // This will fetch Cloud related information
//    // load the bundle code and run it
//     module_load_include('inc', 'aws_cloud', 'includes/aws_cloud.bundle_instance');
//     aws_cloud_process_bundle_instance();
//  }
}
